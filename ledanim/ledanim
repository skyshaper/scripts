#!/usr/bin/env perl
use strict;
use warnings;
use Time::HiRes qw(sleep time);

$| = 1;
my @functions;
push@functions,sub{for$a(1..3,2){print"$_ ".int($a==$_)."\n"for(1..3);sleep 0.07;}};               # fast bouncer
push@functions,sub{for$a(1..3,2){print"$_ ".int($a==$_)."\n"for(1..3);sleep 0.2;}};                # slow bouncer
push@functions,sub{for$a(1..3,2){print"$_ ".int($a!=$_)."\n"for(1..3);sleep 0.2;}};                # slow inverted bouncer
push@functions,sub{for$a(1..3,2){for$b(1,0,1,0,1,0,1,0){print"$a $b\n";sleep 0.05}}};              # strobo bouncer

push@functions,sub{for$a(1,0,1,0){print"1 $a\n2 $a\n3 $a\n";sleep 0.15;}};                         # all flashing
push@functions,sub{print"$_ 1\n"for(1..3);sleep 0.75;};                                            # flood light
push@functions,sub{sub S{$a=shift;print"$_ ".int($a==$_)."\n"for(1..3);sleep 0.03;print"$a 0\n";   # random blinking
	sleep 0.17;};S int((rand 3.5)+0.5)for(1..4);};

while (1)
{
	for my $B (1..10)
	{
		print "$_ 0\n" for (1..3);
		my $num = rand scalar @functions;
		$functions[$num]->() for (1..13);
	}
	print "$_ 0\n" for (1..3);
	sleep 5;
}

__END__

Output of this program is to be piped into a program which reads lines of form
"<NUM> <STATE>" from stdin and sets the state of LED <NUM> to <STATE>.  State
is 1 for on and 0 for off.  Three example programs are provided: out-stdout,
out-thinkpad and out-alix.

Copyright (c) 2008 Lars Stoltenow.
Licensed under WTFPL.
