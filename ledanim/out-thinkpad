#!/usr/bin/env perl
# Copyright (c) 2008 Lara Stoltenow <penma@penma.de>
#                and Maximilian Ga√ü <mxey@cloudconnected.org>
# Licensed under WTFPL
use strict;
use warnings;
use Switch;
use 5.010;

my %models = (
	t23 => {
		1 => 'green:batt',
		2 => ':standby',
		3 => ':bay_active',
	},
	t40 => {
		1 => ':power',
		2 => 'green:batt',
		3 => ':standby',
	},
);

sub write_to_led {
    my($led, $state) = @_;
	my $file = "/sys/class/leds/tpacpi:$led/brightness";
	open(LED, '>', $file) or die("Cannot open $file: $!");
	print LED $state;
	close(LED);
}

sub print_models {
	print STDERR "Supported models: " . join(' ', sort keys(%models)) . "\n";
}

sub detect_model {
	if (!open(DMI, "<", "/sys/class/dmi/id/board_name"))
	{
		print STDERR
		"Model auto-detection failed!\n" .
		"You might want to specify the model as a command-line argument.\n";
		return;
	}
	my $model_id;
	sysread(DMI, $model_id, 4);
	close(DMI);
	
	switch ($model_id)
	{
		case (/^2647$/) { return "t23"; }
		case (/^237[34689]$/) { return "t40"; }
	}
}

if (@ARGV > 1) {
	print STDERR "Usage: $0 MODEL\n";
	print_models;
	exit 1;
}
my $detected_model = detect_model;
my $model = $ARGV[0] // $detected_model;

if (!defined($models{$model})) {
	print STDERR "Model $model not supported\n";
	print_models;
	exit 1;
}
my %map = %{$models{$model}};


while (<STDIN>) {
	chomp;
	/(.) (.)/;
	my $led = $map{$1};
    if (defined($led)) {
        write_to_led($led, $2);
    }
}
